# This Containerfile supports flexible SST and MPICH version building
#
# BUILD ARGUMENTS:
#   SSTver: SST version to build (default: 14.1.0, valid: 14.0.0, 14.1.0, 15.0.0)
#   mpich:  MPICH version  (default: 4.0.2)
#   NCPUS:  Parallel make jobs (default: 2)
#
# STAGES DEFINED:
#   base       – installs OS + build dependencies + compiles MPICH
#   runtime    – installs OS + runtime dependencies
#   core-build – downloads & builds SST-core
#   elements-build – downloads & builds SST-elements
#   sst-full   – final image with SST-core + SST-elements
#   sst-core   – final image with SST-core only (default)
#
# EXAMPLE USAGE:
#
# # Build full SST container (core + elements)
# podman build \
#   --build-arg SSTver=15.0.0 \
#   --build-arg mpich=4.0.2 \
#   --build-arg NCPUS=4 \
#   --target sst-full \
#   -f Containerfile \
#   -t sst-full:15.0.0 \
#   .
#
# # Build core-only SST container
# podman build \
#   --build-arg SSTver=15.0.0 \
#   --build-arg mpich=4.0.2 \
#   -f Containerfile \
#   -t sst-core:15.0.0 \
#   .

# This assumes access to the ubuntu image
FROM ubuntu:22.04 AS base

# Build arguments to control download behavior
ARG SSTver=14.1.0
ARG mpich=4.0.2
ARG mpich_prefix=mpich-$mpich
ARG NCPUS=2

WORKDIR /tmp

# Update and install packages (assumes access to package repositories)
RUN apt update && apt install -y \
    build-essential \
    automake \
    git \
    gfortran \
    python3 \
    python3-dev \
    python3-pip \
    libfabric-dev \
    zlib1g-dev \
    wget \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Download or copy MPICH source
# RUN wget https://www.mpich.org/static/downloads/$mpich/$mpich_prefix.tar.gz --no-check-certificate
COPY ${mpich_prefix}.tar.gz /tmp/

# Build MPICH from source
RUN \
tar xvzf $mpich_prefix.tar.gz                                           && \
cd $mpich_prefix                                                        && \
./configure FFLAGS=-fallow-argument-mismatch FCFLAGS=-fallow-argument-mismatch && \
make -j$NCPUS                                                           && \
make install                                                            && \
make clean                                                              && \
cd ..                                                                   && \
rm -rf $mpich_prefix $mpich_prefix.tar.gz

RUN /sbin/ldconfig

FROM base AS core-build

# Re-declare ARG for this stage
ARG SSTver=14.1.0
ARG NCPUS

RUN mkdir -p /opt/SST/${SSTver}/src

# Download or copy SST-core source
WORKDIR /opt/SST/${SSTver}/src
# RUN wget https://github.com/sstsimulator/sst-core/releases/download/v${SSTver}_Final/sstcore-${SSTver}.tar.gz
COPY sstcore-${SSTver}.tar.gz /opt/SST/${SSTver}/src/

WORKDIR /opt/SST/${SSTver}/src
RUN tar --no-same-owner -xvzf sstcore-${SSTver}.tar.gz
WORKDIR /opt/SST/${SSTver}/src/sst-core
RUN if [ -z "$NCPUS" ]; then \
        export NCPUS=$(($(nproc) / 2)); \
        if [ "$NCPUS" -lt 1 ]; then export NCPUS=1; fi; \
    fi && \
    ./configure --prefix=/opt/SST/${SSTver} && \
    make -j$NCPUS all && \
    make install && \
    make clean && \
    cd /opt/SST/${SSTver}/src && \
    rm -rf sst-core sstcore-${SSTver}.tar.gz

FROM core-build AS elements-build

# Re-declare ARG for this stage
ARG SSTver=14.1.0
ARG NCPUS

# Download or copy SST-elements source
WORKDIR /opt/SST/${SSTver}/src
# RUN wget https://github.com/sstsimulator/sst-elements/releases/download/v${SSTver}_Final/sstelements-${SSTver}.tar.gz
COPY sstelements-${SSTver}.tar.gz /opt/SST/${SSTver}/src/

WORKDIR /opt/SST/${SSTver}/src
RUN tar --no-same-owner -xvzf sstelements-${SSTver}.tar.gz
WORKDIR /opt/SST/${SSTver}/src/sst-elements
RUN if [ -z "$NCPUS" ]; then \
        export NCPUS=$(($(nproc) / 2)); \
        if [ "$NCPUS" -lt 1 ]; then export NCPUS=1; fi; \
    fi && \
    ./configure --prefix=/opt/SST/${SSTver}/elements --with-sst-core=/opt/SST/${SSTver} && \
    make -j$NCPUS all && \
    make install && \
    make clean && \
    cd /opt/SST/${SSTver}/src && \
    rm -rf sst-elements sstelements-${SSTver}.tar.gz

# --- Minimal runtime stage ---
FROM ubuntu:22.04 AS runtime

# Install only runtime dependencies (requires internet connection)
RUN apt update && apt -y install \
    git \
    python3 \
    python3-pip \
    libfabric1 \
    zlib1g \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Copy MPICH runtime libraries
COPY --from=base /usr/local/lib/libmpi* /usr/local/lib/
COPY --from=base /usr/local/bin/mpi* /usr/local/bin/
RUN /sbin/ldconfig

# --- Final stages ---
FROM runtime AS sst-full

# Re-declare ARG for this stage
ARG SSTver=14.1.0

# Copy all of the installed SST directories
COPY --from=elements-build /opt/SST/${SSTver} /opt/SST/${SSTver}

ENV PATH="$PATH:/opt/SST/${SSTver}/bin/"
ENV LD_LIBRARY_PATH="/opt/SST/${SSTver}/lib:/opt/SST/${SSTver}/elements/lib:$LD_LIBRARY_PATH"
WORKDIR /workspace
ENTRYPOINT ["/bin/bash"]

FROM runtime AS sst-core

# Re-declare ARG for this stage
ARG SSTver=14.1.0

# Copy only the installed SST core binaries and libraries
COPY --from=core-build /opt/SST/${SSTver} /opt/SST/${SSTver}

ENV PATH="$PATH:/opt/SST/${SSTver}/bin/"
ENV LD_LIBRARY_PATH="/opt/SST/${SSTver}/lib:$LD_LIBRARY_PATH"
WORKDIR /workspace
ENTRYPOINT ["/bin/bash"]
